/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/orgpolicy/v2/orgpolicy.proto

package com.google.cloud.orgpolicy.v2;

/**
 *
 *
 * <pre>
 * Defines a Cloud Organization `Policy` which is used to specify `Constraints`
 * for configurations of Cloud Platform resources.
 * </pre>
 *
 * Protobuf type {@code google.cloud.orgpolicy.v2.Policy}
 */
public final class Policy extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.cloud.orgpolicy.v2.Policy)
    PolicyOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use Policy.newBuilder() to construct.
  private Policy(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private Policy() {
    name_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new Policy();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  private Policy(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10:
            {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
          case 18:
            {
              com.google.cloud.orgpolicy.v2.PolicySpec.Builder subBuilder = null;
              if (spec_ != null) {
                subBuilder = spec_.toBuilder();
              }
              spec_ =
                  input.readMessage(
                      com.google.cloud.orgpolicy.v2.PolicySpec.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(spec_);
                spec_ = subBuilder.buildPartial();
              }

              break;
            }
          case 26:
            {
              com.google.cloud.orgpolicy.v2.AlternatePolicySpec.Builder subBuilder = null;
              if (alternate_ != null) {
                subBuilder = alternate_.toBuilder();
              }
              alternate_ =
                  input.readMessage(
                      com.google.cloud.orgpolicy.v2.AlternatePolicySpec.parser(),
                      extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(alternate_);
                alternate_ = subBuilder.buildPartial();
              }

              break;
            }
          default:
            {
              if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.cloud.orgpolicy.v2.OrgPolicyProto
        .internal_static_google_cloud_orgpolicy_v2_Policy_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.orgpolicy.v2.OrgPolicyProto
        .internal_static_google_cloud_orgpolicy_v2_Policy_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.orgpolicy.v2.Policy.class,
            com.google.cloud.orgpolicy.v2.Policy.Builder.class);
  }

  public static final int NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object name_;
  /**
   *
   *
   * <pre>
   * Immutable. The resource name of the Policy. Must be one of the following
   * forms, where constraint_name is the name of the constraint which this
   * Policy configures:
   * * `projects/{project_number}/policies/{constraint_name}`
   * * `folders/{folder_id}/policies/{constraint_name}`
   * * `organizations/{organization_id}/policies/{constraint_name}`
   * For example, "projects/123/policies/compute.disableSerialPortAccess".
   * Note: `projects/{project_id}/policies/{constraint_name}` is also an
   * acceptable name for API requests, but responses will return the name using
   * the equivalent project number.
   * </pre>
   *
   * <code>string name = 1 [(.google.api.field_behavior) = IMMUTABLE];</code>
   *
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * Immutable. The resource name of the Policy. Must be one of the following
   * forms, where constraint_name is the name of the constraint which this
   * Policy configures:
   * * `projects/{project_number}/policies/{constraint_name}`
   * * `folders/{folder_id}/policies/{constraint_name}`
   * * `organizations/{organization_id}/policies/{constraint_name}`
   * For example, "projects/123/policies/compute.disableSerialPortAccess".
   * Note: `projects/{project_id}/policies/{constraint_name}` is also an
   * acceptable name for API requests, but responses will return the name using
   * the equivalent project number.
   * </pre>
   *
   * <code>string name = 1 [(.google.api.field_behavior) = IMMUTABLE];</code>
   *
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SPEC_FIELD_NUMBER = 2;
  private com.google.cloud.orgpolicy.v2.PolicySpec spec_;
  /**
   *
   *
   * <pre>
   * Basic information about the Organization Policy.
   * </pre>
   *
   * <code>.google.cloud.orgpolicy.v2.PolicySpec spec = 2;</code>
   *
   * @return Whether the spec field is set.
   */
  @java.lang.Override
  public boolean hasSpec() {
    return spec_ != null;
  }
  /**
   *
   *
   * <pre>
   * Basic information about the Organization Policy.
   * </pre>
   *
   * <code>.google.cloud.orgpolicy.v2.PolicySpec spec = 2;</code>
   *
   * @return The spec.
   */
  @java.lang.Override
  public com.google.cloud.orgpolicy.v2.PolicySpec getSpec() {
    return spec_ == null ? com.google.cloud.orgpolicy.v2.PolicySpec.getDefaultInstance() : spec_;
  }
  /**
   *
   *
   * <pre>
   * Basic information about the Organization Policy.
   * </pre>
   *
   * <code>.google.cloud.orgpolicy.v2.PolicySpec spec = 2;</code>
   */
  @java.lang.Override
  public com.google.cloud.orgpolicy.v2.PolicySpecOrBuilder getSpecOrBuilder() {
    return getSpec();
  }

  public static final int ALTERNATE_FIELD_NUMBER = 3;
  private com.google.cloud.orgpolicy.v2.AlternatePolicySpec alternate_;
  /**
   *
   *
   * <pre>
   * An alternate policy configuration that will be used instead of the baseline
   * policy configurations as determined by the launch.
   * Currently the only way the launch can trigger the alternate configuration
   * is via dry-run/darklaunch.
   * </pre>
   *
   * <code>.google.cloud.orgpolicy.v2.AlternatePolicySpec alternate = 3;</code>
   *
   * @return Whether the alternate field is set.
   */
  @java.lang.Override
  public boolean hasAlternate() {
    return alternate_ != null;
  }
  /**
   *
   *
   * <pre>
   * An alternate policy configuration that will be used instead of the baseline
   * policy configurations as determined by the launch.
   * Currently the only way the launch can trigger the alternate configuration
   * is via dry-run/darklaunch.
   * </pre>
   *
   * <code>.google.cloud.orgpolicy.v2.AlternatePolicySpec alternate = 3;</code>
   *
   * @return The alternate.
   */
  @java.lang.Override
  public com.google.cloud.orgpolicy.v2.AlternatePolicySpec getAlternate() {
    return alternate_ == null
        ? com.google.cloud.orgpolicy.v2.AlternatePolicySpec.getDefaultInstance()
        : alternate_;
  }
  /**
   *
   *
   * <pre>
   * An alternate policy configuration that will be used instead of the baseline
   * policy configurations as determined by the launch.
   * Currently the only way the launch can trigger the alternate configuration
   * is via dry-run/darklaunch.
   * </pre>
   *
   * <code>.google.cloud.orgpolicy.v2.AlternatePolicySpec alternate = 3;</code>
   */
  @java.lang.Override
  public com.google.cloud.orgpolicy.v2.AlternatePolicySpecOrBuilder getAlternateOrBuilder() {
    return getAlternate();
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!getNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
    }
    if (spec_ != null) {
      output.writeMessage(2, getSpec());
    }
    if (alternate_ != null) {
      output.writeMessage(3, getAlternate());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
    }
    if (spec_ != null) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, getSpec());
    }
    if (alternate_ != null) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, getAlternate());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.cloud.orgpolicy.v2.Policy)) {
      return super.equals(obj);
    }
    com.google.cloud.orgpolicy.v2.Policy other = (com.google.cloud.orgpolicy.v2.Policy) obj;

    if (!getName().equals(other.getName())) return false;
    if (hasSpec() != other.hasSpec()) return false;
    if (hasSpec()) {
      if (!getSpec().equals(other.getSpec())) return false;
    }
    if (hasAlternate() != other.hasAlternate()) return false;
    if (hasAlternate()) {
      if (!getAlternate().equals(other.getAlternate())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    if (hasSpec()) {
      hash = (37 * hash) + SPEC_FIELD_NUMBER;
      hash = (53 * hash) + getSpec().hashCode();
    }
    if (hasAlternate()) {
      hash = (37 * hash) + ALTERNATE_FIELD_NUMBER;
      hash = (53 * hash) + getAlternate().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.orgpolicy.v2.Policy parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.orgpolicy.v2.Policy parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.orgpolicy.v2.Policy parseFrom(com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.orgpolicy.v2.Policy parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.orgpolicy.v2.Policy parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.orgpolicy.v2.Policy parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.orgpolicy.v2.Policy parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.orgpolicy.v2.Policy parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.orgpolicy.v2.Policy parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.cloud.orgpolicy.v2.Policy parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.orgpolicy.v2.Policy parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.orgpolicy.v2.Policy parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.cloud.orgpolicy.v2.Policy prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * Defines a Cloud Organization `Policy` which is used to specify `Constraints`
   * for configurations of Cloud Platform resources.
   * </pre>
   *
   * Protobuf type {@code google.cloud.orgpolicy.v2.Policy}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.cloud.orgpolicy.v2.Policy)
      com.google.cloud.orgpolicy.v2.PolicyOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.cloud.orgpolicy.v2.OrgPolicyProto
          .internal_static_google_cloud_orgpolicy_v2_Policy_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.orgpolicy.v2.OrgPolicyProto
          .internal_static_google_cloud_orgpolicy_v2_Policy_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.orgpolicy.v2.Policy.class,
              com.google.cloud.orgpolicy.v2.Policy.Builder.class);
    }

    // Construct using com.google.cloud.orgpolicy.v2.Policy.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {}
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      name_ = "";

      if (specBuilder_ == null) {
        spec_ = null;
      } else {
        spec_ = null;
        specBuilder_ = null;
      }
      if (alternateBuilder_ == null) {
        alternate_ = null;
      } else {
        alternate_ = null;
        alternateBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.cloud.orgpolicy.v2.OrgPolicyProto
          .internal_static_google_cloud_orgpolicy_v2_Policy_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.orgpolicy.v2.Policy getDefaultInstanceForType() {
      return com.google.cloud.orgpolicy.v2.Policy.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.orgpolicy.v2.Policy build() {
      com.google.cloud.orgpolicy.v2.Policy result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.orgpolicy.v2.Policy buildPartial() {
      com.google.cloud.orgpolicy.v2.Policy result = new com.google.cloud.orgpolicy.v2.Policy(this);
      result.name_ = name_;
      if (specBuilder_ == null) {
        result.spec_ = spec_;
      } else {
        result.spec_ = specBuilder_.build();
      }
      if (alternateBuilder_ == null) {
        result.alternate_ = alternate_;
      } else {
        result.alternate_ = alternateBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.orgpolicy.v2.Policy) {
        return mergeFrom((com.google.cloud.orgpolicy.v2.Policy) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.orgpolicy.v2.Policy other) {
      if (other == com.google.cloud.orgpolicy.v2.Policy.getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      if (other.hasSpec()) {
        mergeSpec(other.getSpec());
      }
      if (other.hasAlternate()) {
        mergeAlternate(other.getAlternate());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.cloud.orgpolicy.v2.Policy parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.cloud.orgpolicy.v2.Policy) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private java.lang.Object name_ = "";
    /**
     *
     *
     * <pre>
     * Immutable. The resource name of the Policy. Must be one of the following
     * forms, where constraint_name is the name of the constraint which this
     * Policy configures:
     * * `projects/{project_number}/policies/{constraint_name}`
     * * `folders/{folder_id}/policies/{constraint_name}`
     * * `organizations/{organization_id}/policies/{constraint_name}`
     * For example, "projects/123/policies/compute.disableSerialPortAccess".
     * Note: `projects/{project_id}/policies/{constraint_name}` is also an
     * acceptable name for API requests, but responses will return the name using
     * the equivalent project number.
     * </pre>
     *
     * <code>string name = 1 [(.google.api.field_behavior) = IMMUTABLE];</code>
     *
     * @return The name.
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Immutable. The resource name of the Policy. Must be one of the following
     * forms, where constraint_name is the name of the constraint which this
     * Policy configures:
     * * `projects/{project_number}/policies/{constraint_name}`
     * * `folders/{folder_id}/policies/{constraint_name}`
     * * `organizations/{organization_id}/policies/{constraint_name}`
     * For example, "projects/123/policies/compute.disableSerialPortAccess".
     * Note: `projects/{project_id}/policies/{constraint_name}` is also an
     * acceptable name for API requests, but responses will return the name using
     * the equivalent project number.
     * </pre>
     *
     * <code>string name = 1 [(.google.api.field_behavior) = IMMUTABLE];</code>
     *
     * @return The bytes for name.
     */
    public com.google.protobuf.ByteString getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Immutable. The resource name of the Policy. Must be one of the following
     * forms, where constraint_name is the name of the constraint which this
     * Policy configures:
     * * `projects/{project_number}/policies/{constraint_name}`
     * * `folders/{folder_id}/policies/{constraint_name}`
     * * `organizations/{organization_id}/policies/{constraint_name}`
     * For example, "projects/123/policies/compute.disableSerialPortAccess".
     * Note: `projects/{project_id}/policies/{constraint_name}` is also an
     * acceptable name for API requests, but responses will return the name using
     * the equivalent project number.
     * </pre>
     *
     * <code>string name = 1 [(.google.api.field_behavior) = IMMUTABLE];</code>
     *
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      name_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Immutable. The resource name of the Policy. Must be one of the following
     * forms, where constraint_name is the name of the constraint which this
     * Policy configures:
     * * `projects/{project_number}/policies/{constraint_name}`
     * * `folders/{folder_id}/policies/{constraint_name}`
     * * `organizations/{organization_id}/policies/{constraint_name}`
     * For example, "projects/123/policies/compute.disableSerialPortAccess".
     * Note: `projects/{project_id}/policies/{constraint_name}` is also an
     * acceptable name for API requests, but responses will return the name using
     * the equivalent project number.
     * </pre>
     *
     * <code>string name = 1 [(.google.api.field_behavior) = IMMUTABLE];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearName() {

      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Immutable. The resource name of the Policy. Must be one of the following
     * forms, where constraint_name is the name of the constraint which this
     * Policy configures:
     * * `projects/{project_number}/policies/{constraint_name}`
     * * `folders/{folder_id}/policies/{constraint_name}`
     * * `organizations/{organization_id}/policies/{constraint_name}`
     * For example, "projects/123/policies/compute.disableSerialPortAccess".
     * Note: `projects/{project_id}/policies/{constraint_name}` is also an
     * acceptable name for API requests, but responses will return the name using
     * the equivalent project number.
     * </pre>
     *
     * <code>string name = 1 [(.google.api.field_behavior) = IMMUTABLE];</code>
     *
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      name_ = value;
      onChanged();
      return this;
    }

    private com.google.cloud.orgpolicy.v2.PolicySpec spec_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.orgpolicy.v2.PolicySpec,
            com.google.cloud.orgpolicy.v2.PolicySpec.Builder,
            com.google.cloud.orgpolicy.v2.PolicySpecOrBuilder>
        specBuilder_;
    /**
     *
     *
     * <pre>
     * Basic information about the Organization Policy.
     * </pre>
     *
     * <code>.google.cloud.orgpolicy.v2.PolicySpec spec = 2;</code>
     *
     * @return Whether the spec field is set.
     */
    public boolean hasSpec() {
      return specBuilder_ != null || spec_ != null;
    }
    /**
     *
     *
     * <pre>
     * Basic information about the Organization Policy.
     * </pre>
     *
     * <code>.google.cloud.orgpolicy.v2.PolicySpec spec = 2;</code>
     *
     * @return The spec.
     */
    public com.google.cloud.orgpolicy.v2.PolicySpec getSpec() {
      if (specBuilder_ == null) {
        return spec_ == null
            ? com.google.cloud.orgpolicy.v2.PolicySpec.getDefaultInstance()
            : spec_;
      } else {
        return specBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Basic information about the Organization Policy.
     * </pre>
     *
     * <code>.google.cloud.orgpolicy.v2.PolicySpec spec = 2;</code>
     */
    public Builder setSpec(com.google.cloud.orgpolicy.v2.PolicySpec value) {
      if (specBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        spec_ = value;
        onChanged();
      } else {
        specBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Basic information about the Organization Policy.
     * </pre>
     *
     * <code>.google.cloud.orgpolicy.v2.PolicySpec spec = 2;</code>
     */
    public Builder setSpec(com.google.cloud.orgpolicy.v2.PolicySpec.Builder builderForValue) {
      if (specBuilder_ == null) {
        spec_ = builderForValue.build();
        onChanged();
      } else {
        specBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Basic information about the Organization Policy.
     * </pre>
     *
     * <code>.google.cloud.orgpolicy.v2.PolicySpec spec = 2;</code>
     */
    public Builder mergeSpec(com.google.cloud.orgpolicy.v2.PolicySpec value) {
      if (specBuilder_ == null) {
        if (spec_ != null) {
          spec_ =
              com.google.cloud.orgpolicy.v2.PolicySpec.newBuilder(spec_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          spec_ = value;
        }
        onChanged();
      } else {
        specBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Basic information about the Organization Policy.
     * </pre>
     *
     * <code>.google.cloud.orgpolicy.v2.PolicySpec spec = 2;</code>
     */
    public Builder clearSpec() {
      if (specBuilder_ == null) {
        spec_ = null;
        onChanged();
      } else {
        spec_ = null;
        specBuilder_ = null;
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Basic information about the Organization Policy.
     * </pre>
     *
     * <code>.google.cloud.orgpolicy.v2.PolicySpec spec = 2;</code>
     */
    public com.google.cloud.orgpolicy.v2.PolicySpec.Builder getSpecBuilder() {

      onChanged();
      return getSpecFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Basic information about the Organization Policy.
     * </pre>
     *
     * <code>.google.cloud.orgpolicy.v2.PolicySpec spec = 2;</code>
     */
    public com.google.cloud.orgpolicy.v2.PolicySpecOrBuilder getSpecOrBuilder() {
      if (specBuilder_ != null) {
        return specBuilder_.getMessageOrBuilder();
      } else {
        return spec_ == null
            ? com.google.cloud.orgpolicy.v2.PolicySpec.getDefaultInstance()
            : spec_;
      }
    }
    /**
     *
     *
     * <pre>
     * Basic information about the Organization Policy.
     * </pre>
     *
     * <code>.google.cloud.orgpolicy.v2.PolicySpec spec = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.orgpolicy.v2.PolicySpec,
            com.google.cloud.orgpolicy.v2.PolicySpec.Builder,
            com.google.cloud.orgpolicy.v2.PolicySpecOrBuilder>
        getSpecFieldBuilder() {
      if (specBuilder_ == null) {
        specBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.orgpolicy.v2.PolicySpec,
                com.google.cloud.orgpolicy.v2.PolicySpec.Builder,
                com.google.cloud.orgpolicy.v2.PolicySpecOrBuilder>(
                getSpec(), getParentForChildren(), isClean());
        spec_ = null;
      }
      return specBuilder_;
    }

    private com.google.cloud.orgpolicy.v2.AlternatePolicySpec alternate_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.orgpolicy.v2.AlternatePolicySpec,
            com.google.cloud.orgpolicy.v2.AlternatePolicySpec.Builder,
            com.google.cloud.orgpolicy.v2.AlternatePolicySpecOrBuilder>
        alternateBuilder_;
    /**
     *
     *
     * <pre>
     * An alternate policy configuration that will be used instead of the baseline
     * policy configurations as determined by the launch.
     * Currently the only way the launch can trigger the alternate configuration
     * is via dry-run/darklaunch.
     * </pre>
     *
     * <code>.google.cloud.orgpolicy.v2.AlternatePolicySpec alternate = 3;</code>
     *
     * @return Whether the alternate field is set.
     */
    public boolean hasAlternate() {
      return alternateBuilder_ != null || alternate_ != null;
    }
    /**
     *
     *
     * <pre>
     * An alternate policy configuration that will be used instead of the baseline
     * policy configurations as determined by the launch.
     * Currently the only way the launch can trigger the alternate configuration
     * is via dry-run/darklaunch.
     * </pre>
     *
     * <code>.google.cloud.orgpolicy.v2.AlternatePolicySpec alternate = 3;</code>
     *
     * @return The alternate.
     */
    public com.google.cloud.orgpolicy.v2.AlternatePolicySpec getAlternate() {
      if (alternateBuilder_ == null) {
        return alternate_ == null
            ? com.google.cloud.orgpolicy.v2.AlternatePolicySpec.getDefaultInstance()
            : alternate_;
      } else {
        return alternateBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * An alternate policy configuration that will be used instead of the baseline
     * policy configurations as determined by the launch.
     * Currently the only way the launch can trigger the alternate configuration
     * is via dry-run/darklaunch.
     * </pre>
     *
     * <code>.google.cloud.orgpolicy.v2.AlternatePolicySpec alternate = 3;</code>
     */
    public Builder setAlternate(com.google.cloud.orgpolicy.v2.AlternatePolicySpec value) {
      if (alternateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        alternate_ = value;
        onChanged();
      } else {
        alternateBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * An alternate policy configuration that will be used instead of the baseline
     * policy configurations as determined by the launch.
     * Currently the only way the launch can trigger the alternate configuration
     * is via dry-run/darklaunch.
     * </pre>
     *
     * <code>.google.cloud.orgpolicy.v2.AlternatePolicySpec alternate = 3;</code>
     */
    public Builder setAlternate(
        com.google.cloud.orgpolicy.v2.AlternatePolicySpec.Builder builderForValue) {
      if (alternateBuilder_ == null) {
        alternate_ = builderForValue.build();
        onChanged();
      } else {
        alternateBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * An alternate policy configuration that will be used instead of the baseline
     * policy configurations as determined by the launch.
     * Currently the only way the launch can trigger the alternate configuration
     * is via dry-run/darklaunch.
     * </pre>
     *
     * <code>.google.cloud.orgpolicy.v2.AlternatePolicySpec alternate = 3;</code>
     */
    public Builder mergeAlternate(com.google.cloud.orgpolicy.v2.AlternatePolicySpec value) {
      if (alternateBuilder_ == null) {
        if (alternate_ != null) {
          alternate_ =
              com.google.cloud.orgpolicy.v2.AlternatePolicySpec.newBuilder(alternate_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          alternate_ = value;
        }
        onChanged();
      } else {
        alternateBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * An alternate policy configuration that will be used instead of the baseline
     * policy configurations as determined by the launch.
     * Currently the only way the launch can trigger the alternate configuration
     * is via dry-run/darklaunch.
     * </pre>
     *
     * <code>.google.cloud.orgpolicy.v2.AlternatePolicySpec alternate = 3;</code>
     */
    public Builder clearAlternate() {
      if (alternateBuilder_ == null) {
        alternate_ = null;
        onChanged();
      } else {
        alternate_ = null;
        alternateBuilder_ = null;
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * An alternate policy configuration that will be used instead of the baseline
     * policy configurations as determined by the launch.
     * Currently the only way the launch can trigger the alternate configuration
     * is via dry-run/darklaunch.
     * </pre>
     *
     * <code>.google.cloud.orgpolicy.v2.AlternatePolicySpec alternate = 3;</code>
     */
    public com.google.cloud.orgpolicy.v2.AlternatePolicySpec.Builder getAlternateBuilder() {

      onChanged();
      return getAlternateFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * An alternate policy configuration that will be used instead of the baseline
     * policy configurations as determined by the launch.
     * Currently the only way the launch can trigger the alternate configuration
     * is via dry-run/darklaunch.
     * </pre>
     *
     * <code>.google.cloud.orgpolicy.v2.AlternatePolicySpec alternate = 3;</code>
     */
    public com.google.cloud.orgpolicy.v2.AlternatePolicySpecOrBuilder getAlternateOrBuilder() {
      if (alternateBuilder_ != null) {
        return alternateBuilder_.getMessageOrBuilder();
      } else {
        return alternate_ == null
            ? com.google.cloud.orgpolicy.v2.AlternatePolicySpec.getDefaultInstance()
            : alternate_;
      }
    }
    /**
     *
     *
     * <pre>
     * An alternate policy configuration that will be used instead of the baseline
     * policy configurations as determined by the launch.
     * Currently the only way the launch can trigger the alternate configuration
     * is via dry-run/darklaunch.
     * </pre>
     *
     * <code>.google.cloud.orgpolicy.v2.AlternatePolicySpec alternate = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.orgpolicy.v2.AlternatePolicySpec,
            com.google.cloud.orgpolicy.v2.AlternatePolicySpec.Builder,
            com.google.cloud.orgpolicy.v2.AlternatePolicySpecOrBuilder>
        getAlternateFieldBuilder() {
      if (alternateBuilder_ == null) {
        alternateBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.orgpolicy.v2.AlternatePolicySpec,
                com.google.cloud.orgpolicy.v2.AlternatePolicySpec.Builder,
                com.google.cloud.orgpolicy.v2.AlternatePolicySpecOrBuilder>(
                getAlternate(), getParentForChildren(), isClean());
        alternate_ = null;
      }
      return alternateBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.orgpolicy.v2.Policy)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.orgpolicy.v2.Policy)
  private static final com.google.cloud.orgpolicy.v2.Policy DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.cloud.orgpolicy.v2.Policy();
  }

  public static com.google.cloud.orgpolicy.v2.Policy getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Policy> PARSER =
      new com.google.protobuf.AbstractParser<Policy>() {
        @java.lang.Override
        public Policy parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Policy(input, extensionRegistry);
        }
      };

  public static com.google.protobuf.Parser<Policy> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Policy> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.orgpolicy.v2.Policy getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
